variables:
  IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
  IMAGE_TAG_COMPOSE: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-compose
  DOCKER_HUB_REPOSITORY: pixelfederation/docker-client
  DOCKER_TLS_CERTDIR: /certs
  DOCKER_RUNNER_VERSION: 20.10.18
  DOCKER_VERSION: 20.10.18
  DOCKER_COMPOSE_VERSION: 1.29.0
  TRIVY_VERSION: 0.16.0
  DOCKER_BUILDX_VERSION: 0.10.4
  DOCKER_AWS_ECR_CREDENTIAL_HELPER_VERSION: 0.6.0
  DOCKER_PASS_CREDENTIAL_HELPER_VERSION: 0.7.0
  PYTHON_VERSION: "3.9"
  ALPINE_VERSION: "3.16"

# do not run duplicate "detached" pipelines
# https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - lint
  - build
  - test
  - deploy

lint-shellcheck:
  image: koalaman/shellcheck-alpine:stable
  stage: lint
  script: shellcheck scripts/*.sh
  rules:
    - changes:
        - scripts/*.sh
        - .gitlab-ci.yml

lint-yamllint:
  image: python:$PYTHON_VERSION-alpine$ALPINE_VERSION
  stage: lint
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip/
  cache:
    paths:
      - .cache/pip/
  before_script:
    - pip install yamllint
  script: yamllint .
  rules:
    - changes:
        - "**/*.{yml,yaml}"

build-docker-image:
  image: docker:$DOCKER_RUNNER_VERSION
  stage: build
  variables:
    DOCKER_BUILDKIT: "1"
  services:
    - docker:$DOCKER_RUNNER_VERSION-dind
  before_script:
    - docker info
    - ./scripts/gitlab-docker-registry-login.sh
  script:
    - docker pull "$CI_REGISTRY_IMAGE:latest" || true
    - >-
        docker build --pull --build-arg "DOCKER_VERSION=$DOCKER_VERSION"
        --target client
        --build-arg "DOCKER_BUILDX_VERSION=$DOCKER_BUILDX_VERSION"
        --build-arg "DOCKER_AWS_ECR_CREDENTIAL_HELPER_VERSION=$DOCKER_AWS_ECR_CREDENTIAL_HELPER_VERSION"
        --build-arg "DOCKER_PASS_CREDENTIAL_HELPER_VERSION=$DOCKER_PASS_CREDENTIAL_HELPER_VERSION"
        --tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" .
    - docker push "$CI_REGISTRY_IMAGE:$IMAGE_TAG"
    - docker pull "$CI_REGISTRY_IMAGE:composer" || true
    - >-
        docker build --pull --build-arg "DOCKER_VERSION=$DOCKER_VERSION"
        --target compose
        --build-arg "DOCKER_BUILDX_VERSION=$DOCKER_BUILDX_VERSION"
        --build-arg "DOCKER_AWS_ECR_CREDENTIAL_HELPER_VERSION=$DOCKER_AWS_ECR_CREDENTIAL_HELPER_VERSION"
        --build-arg "DOCKER_PASS_CREDENTIAL_HELPER_VERSION=$DOCKER_PASS_CREDENTIAL_HELPER_VERSION"
        --build-arg "DOCKER_COMPOSE_VERSION=$DOCKER_COMPOSE_VERSION"
        --tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE" .
    - docker push "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE"

test-build-self-buildx:
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  stage: test
  needs:
    - build-docker-image
  variables:
    DOCKER_BUILDX_CONTEXT_CREATE: "1"
    DOCKER_BUILDX_BUILDER_CREATE: "1"
  services:
    - docker:$DOCKER_RUNNER_VERSION-dind
  before_script:
    - docker-use-buildx
    - gitlab-docker-registry-login
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE:$IMAGE_TAG-self" --load
    - docker image ls

test-build-self-docker-compose:
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE
  stage: test
  needs:
    - build-docker-image
  variables:
    TARGET: compose
    DOCKER_BUILDKIT: "1"
    COMPOSE_DOCKER_CLI_BUILD: "1"
  services:
    - docker:$DOCKER_RUNNER_VERSION-dind
  before_script:
    - gitlab-docker-registry-login
  script:
    - docker-compose build --pull local
    - docker images ls

test-scan-trivy:
  image:
    name: aquasec/trivy:$TRIVY_VERSION
    entrypoint: [""]
  stage: test
  needs:
    - build-docker-image
  cache:
    paths:
      - .trivycache/
  variables:
    TRIVY_AUTH_URL: $CI_REGISTRY
    TRIVY_USERNAME: $CI_REGISTRY_USER
    TRIVY_PASSWORD: $CI_REGISTRY_PASSWORD
    TRIVY_CACHE_DIR: $CI_PROJECT_DIR/.trivycache/
  allow_failure: true
  script:
    - trivy -no-progress "$CI_REGISTRY_IMAGE:$IMAGE_TAG"
    - trivy -no-progress "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE"

deploy-docker-image:
  image: docker:$DOCKER_RUNNER_VERSION
  stage: deploy
  variables:
    DOCKER_REGISTRY: $DOCKER_HUB_REGISTRY
    DOCKER_USERNAME: $DOCKER_HUB_USERNAME
    DOCKER_PASSWORD: $DOCKER_HUB_TOKEN
  environment:
    name: prod
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  services:
    - docker:$DOCKER_RUNNER_VERSION-dind
  before_script:
    - ./scripts/docker-registry-login.sh
    - ./scripts/gitlab-docker-registry-login.sh
  script:
    - docker pull "$CI_REGISTRY_IMAGE:$IMAGE_TAG"
    - docker pull "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE"
    # GitLab tags
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" "$CI_REGISTRY_IMAGE:$DOCKER_VERSION"
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" "$CI_REGISTRY_IMAGE:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE" "$CI_REGISTRY_IMAGE:$DOCKER_VERSION-compose"
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE" "$CI_REGISTRY_IMAGE:compose"
    # Docker Hub tags
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:$DOCKER_VERSION"
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:latest"
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE" "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:$DOCKER_VERSION-compose"
    - docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG_COMPOSE" "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:compose"
    # GitLab push
    - docker push "$CI_REGISTRY_IMAGE:$DOCKER_VERSION"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:$DOCKER_VERSION-compose"
    - docker push "$CI_REGISTRY_IMAGE:compose"
    # DockerHub pash
    - docker push "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:$DOCKER_VERSION"
    - docker push "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:latest"
    - docker push "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:$DOCKER_VERSION-compose"
    - docker push "$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:compose"
